generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  userType        UserType  @default(CLIENT)
  tasks           Task[]
  managedProjects Project[]
  accounts        Account[]
  Comment         Comment[]
  Client          Client[]
}

// Account model
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// Client model
model Client {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  name   String
  email  String @unique

  projects Project[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Project model
model Project {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  managerId   String @db.ObjectId
  clientId    String @db.ObjectId
  name        String
  description String

  projectType ProjectType @default(INTERNAL)
  tasks       Task[]

  client  Client @relation(fields: [clientId], references: [id])
  manager User?  @relation(fields: [managerId], references: [id])
}

// Task model
model Task {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  assignedToId String? @db.ObjectId
  projectId    String  @db.ObjectId
  name         String
  description  String?

  status   Status    @default(TODO)
  priority Priority  @default(LOW)
  comments Comment[]

  project    Project @relation(fields: [projectId], references: [id])
  assignedTo User?   @relation(fields: [assignedToId], references: [id])
}

// Comment model
model Comment {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  taskId   String @db.ObjectId
  authorId String @db.ObjectId
  text     String

  author User @relation(fields: [authorId], references: [id])
  task   Task @relation(fields: [taskId], references: [id])
}

// Enums for the models
enum UserType {
  CLIENT
  STAFF
  ADMIN
}

enum ProjectType {
  INTERNAL
  EXTERNAL
}

enum Status {
  TODO
  IN_PROGRESS
  DONE
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}
